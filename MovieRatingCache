import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

/**
 * Displays Movie Name with total rating given to the movie
 *
 */
@SuppressWarnings("deprecation")
public class MovieRatingCache
{

    public static class MovieRatingCacheMapper extends Mapper<Object, Text, Text, Text>
    {
    	protected void setup(Context context)
                throws IOException, InterruptedException {
            // TODO Auto-generated method stub
            Path[] cacheFiles = DistributedCache.getLocalCacheFiles(context.getConfiguration());
            for(Path path:cacheFiles)
            {
               
                BufferedReader reader=new BufferedReader(new FileReader(path.toString()));
                String line;
                while((line=reader.readLine())!=null)
                {
                    String str[]=line.split("::");
                    
                    context.write(new Text(str[0]), new Text(str[1]));
                }
            }
        }

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException
        {
             try {
                   String[] line=value.toString().split("::");
                   context.write(new Text(line[1]), new Text(line[2]));
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
   
    public static class MovieRatingCacheReducer extends Reducer<Text, Text, Text, Text>
    {
         int sum=0;
        public void reduce(Text key, Iterable<Text> values, Context context)
        {

                try {
                    String movieName = "";
                    for (Text value : values)
                    {
                            String val = value.toString();
                            char myChar = val.charAt(0);
                            if (Character.isDigit(myChar) && val.length()<=2)
                            {
                                sum++;
                            }
                            else
                            {
                                movieName = val;
                            }
                    }
                    context.write(new Text(movieName), new Text("\t\tNumber of Rating : "+sum));
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
    }
    }
    public static void main( String[] args )
    {
        try {
            Configuration conf = new Configuration();
            Job job;
            job = Job.getInstance(conf, "xyz");
            job.setJarByClass(MovieRatingCache.class);
            DistributedCache.addCacheFile(new URI("/user/impadmin/movies.txt"), job.getConfiguration());
            
            System.out.println("\nAdded 2 files\n");
            FileInputFormat.setInputPaths(job, new Path("/user/impadmin/ratings.txt"));
            FileOutputFormat.setOutputPath(job, new Path("/user/impadmin/first.txt"));
           
            job.setMapperClass(MovieRatingCacheMapper.class);
            job.setReducerClass(MovieRatingCacheReducer.class);
            job.setOutputKeyClass(Text.class);
            job.setOutputValueClass(Text.class);
            System.exit(job.waitForCompletion(true) ? 0 : 1);

       } catch (Exception e) {
           // TODO Auto-generated catch block
           e.printStackTrace();
       }

    }
}
