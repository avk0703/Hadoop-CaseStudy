package com.impetus.MovieLens;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class UserMovieRating extends Configured implements Tool {
	public static class IdRating extends Mapper<Object, Text, Text, Text> {
		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] line = value.toString().split("::");
			context.write(new Text(line[1]), new Text(line[2]));
		}
	}

	public static class IdMovies extends Mapper<Object, Text, Text, Text> {
		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] line = value.toString().split("::");
			context.write(new Text(line[0]), new Text(line[1]));
		}
	}

	public static class IdUserId extends Mapper<Object, Text, Text, Text> {
		String userId = "";

		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] line = value.toString().split("::");
			userId = "*" + line[0];
			context.write(new Text(line[1]), new Text(userId));
		}
	}

	public static class UserMovieRatingReducer extends
			Reducer<Text, Text, Text, Text> {

		int sum = 0;

		public void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {
			String movieName = "";
			String rating = "";
			String userID = "";
			String inputValue = "";
			List<String> list1=new ArrayList<String>();
			List<String> list2=new ArrayList<String>();
			for (Text value : values) {

				String val = value.toString();
				char myChar = val.charAt(0);
				if (Character.isDigit(myChar) && val.length() <= 2) {
					
					list1.add(val);
					rating = val;
				} else if (myChar == '*') {
					list2.add(val);
					userID = val;
				} else {

					movieName = val;
				}
				
			for(int i=0;i<list1.size();i++)
			{
				inputValue = "\tMOVIE NAME:" + movieName + "\tRATING: " + list1.get(i);
				context.write(new Text("USER ID:" + list2.get(i)), new Text(inputValue));
			}
			
		}
	}

	public int run(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = new Job(conf);
		job.setJarByClass(MovieRating.class);

		MultipleInputs.addInputPath(job,
				new Path("/user/impadmin/ratings.txt"), TextInputFormat.class,
				IdRating.class);
		MultipleInputs.addInputPath(job, new Path("/user/impadmin/movies.txt"),
				TextInputFormat.class, IdMovies.class);
		MultipleInputs.addInputPath(job,
				new Path("/user/impadmin/ratings1.txt"), TextInputFormat.class,
				IdUserId.class);

		FileOutputFormat.setOutputPath(job, new Path(
				"/user/impadmin/UserMovieRating.txt"));

		job.setReducerClass(UserMovieRatingReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		return (job.waitForCompletion(true) ? 0 : 1);

	}
	}
	public static void main(String[] args) throws Exception {

		int ecode = ToolRunner.run(new UserMovieRating(), args);
		System.exit(ecode);

	}
	

	public int run(String[] arg0) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}
	}
